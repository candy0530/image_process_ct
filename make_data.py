import cv2

image_index = '15'
do_catagory = True
file_path = '/Users/candy/Workspace/Paper_CT/dataset'
img = cv2.imread('{}/origin_data/{}-02-last_result.png'.format(file_path, image_index), 0)

rows, cols = img.shape[:2]
data_size = 15
data_number = 0
yes_array_07 = [[134, 114], [134, 115], [134, 116], [134, 117], [134, 118], [134, 119], [134, 120], [135, 112], [135, 113], [135, 114], [135, 115], [135, 116], [135, 117], [135, 118], [135, 119], [135, 120], [135, 121], [136, 110], [136, 111], [136, 112], [136, 113], [136, 114], [136, 115], [136, 116], [136, 117], [136, 118], [136, 119], [136, 120], [136, 121], [137, 110], [137, 111], [137, 112], [137, 113], [137, 114], [137, 115], [137, 116], [137, 117], [137, 118], [137, 119], [137, 120], [137, 121], [137, 122], [137, 123], [138, 108], [138, 109], [138, 110], [138, 111], [138, 112], [138, 113], [138, 114], [138, 115], [138, 116], [138, 117], [138, 118], [138, 119], [138, 120], [138, 121], [138, 122], [138, 123], [139, 108], [139, 109], [139, 110], [139, 111], [139, 112], [139, 113], [139, 114], [139, 115], [139, 116], [139, 117], [139, 118], [139, 119], [139, 120], [139, 121], [139, 122], [139, 123], [139, 124], [140, 108], [140, 109], [140, 110], [140, 111], [140, 112], [140, 113], [140, 114], [140, 115], [140, 116], [140, 117], [140, 118], [140, 119], [140, 120], [140, 121], [140, 122], [140, 123], [141, 108], [141, 109], [141, 110], [141, 111], [141, 112], [141, 113], [141, 114], [141, 115], [141, 116], [141, 117], [141, 118], [141, 119], [141, 120], [141, 121], [141, 122], [141, 123], [142, 108], [142, 109], [142, 110], [142, 111], [142, 112], [142, 113], [142, 114], [142, 115], [142, 116], [142, 117], [142, 118], [142, 119], [142, 120], [142, 121], [142, 122], [142, 123], [142, 124], [143, 108], [143, 109], [143, 110], [143, 111], [143, 112], [143, 113], [143, 114], [143, 115], [143, 116], [143, 117], [143, 118], [143, 119], [143, 120], [143, 121], [143, 122], [143, 123], [143, 124], [144, 109], [144, 110], [144, 111], [144, 112], [144, 113], [144, 114], [144, 115], [144, 116], [144, 117], [144, 118], [144, 119], [144, 120], [144, 121], [144, 122], [145, 109], [145, 110], [145, 111], [145, 112], [145, 113], [145, 114], [145, 115], [145, 116], [145, 117], [145, 118], [145, 119], [145, 120], [145, 121], [145, 122], [146, 110], [146, 111], [146, 112], [146, 113], [146, 114], [146, 115], [146, 116], [146, 117], [146, 118], [146, 119], [146, 120], [146, 121], [147, 110], [147, 111], [147, 112], [147, 113], [147, 114], [147, 115], [147, 116], [147, 117], [147, 118], [147, 119], [147, 120], [147, 121], [148, 111], [148, 112], [148, 113], [148, 114], [148, 115], [148, 116], [148, 117], [148, 118], [148, 119], [148, 120], [148, 121], [149, 112], [149, 113], [149, 114], [149, 115], [149, 116], [149, 117], [149, 118], [150, 113], [150, 114], [150, 115], [150, 116], [151, 114]]
yes_array_08 = [[197, 72], [197, 73], [197, 74], [198, 72], [198, 73], [198, 74], [199, 72], [199, 73], [199, 74], [200, 71], [200, 72], [200, 73], [200, 74], [200, 75], [200, 76], [201, 71], [201, 72], [201, 73], [201, 74], [201, 75], [201, 76], [201, 77], [201, 78], [202, 71], [202, 72], [202, 73], [202, 74], [202, 75], [202, 76], [202, 77], [202, 78], [203, 71], [203, 72], [203, 73], [203, 74], [203, 75], [203, 76], [203, 77], [203, 78], [204, 71], [204, 72], [204, 73], [204, 74], [204, 75], [204, 76], [204, 77], [204, 78], [205, 71], [205, 72], [205, 73], [205, 74], [205, 75], [205, 76], [205, 77], [205, 78], [206, 71], [206, 72], [206, 73], [206, 74], [206, 75], [206, 76], [206, 77], [206, 78], [206, 79], [207, 71], [207, 72], [207, 73], [207, 74], [207, 75], [207, 76], [207, 77], [207, 78], [207, 79], [208, 71], [208, 72], [208, 73], [208, 74], [208, 75], [208, 76], [208, 77], [208, 78], [208, 79], [209, 71], [209, 72], [209, 73], [209, 74], [209, 75], [209, 76], [209, 77], [209, 78], [209, 79], [210, 71], [210, 72], [210, 73], [210, 74], [210, 75], [210, 76], [210, 77], [210, 78], [210, 79], [211, 71], [211, 72], [211, 73], [211, 74], [211, 75], [211, 76], [211, 77], [211, 78], [211, 79], [212, 71], [212, 72], [212, 73], [212, 74], [212, 75], [212, 76], [212, 77], [212, 78], [212, 79], [213, 71], [213, 72], [213, 73], [213, 74], [213, 75], [213, 76], [213, 77], [213, 78], [213, 79], [213, 80], [214, 71], [214, 72], [214, 73], [214, 74], [214, 75], [214, 76], [214, 77], [214, 78], [214, 79], [214, 80], [215, 71], [215, 72], [215, 73], [215, 74], [215, 75], [215, 76], [215, 77], [215, 78], [215, 79], [215, 80], [216, 72], [216, 73], [216, 74], [216, 75], [216, 76], [216, 77], [216, 78], [216, 79], [217, 72], [217, 73], [217, 74], [217, 75], [217, 76], [217, 77], [217, 78], [217, 79], [218, 72], [218, 73], [218, 74], [218, 75], [218, 76], [218, 77], [218, 78], [218, 79], [219, 75], [219, 76], [219, 77], [219, 78], [219, 79], [220, 77], [220, 78], [220, 79]]
yes_array_09 = [[139, 254], [139, 255], [139, 256], [139, 257], [140, 251], [140, 252], [140, 253], [140, 254], [140, 255], [140, 256], [140, 257], [141, 250], [141, 251], [141, 252], [141, 253], [141, 254], [141, 255], [141, 256], [141, 257], [141, 258], [142, 250], [142, 251], [142, 252], [142, 253], [142, 254], [142, 255], [142, 256], [142, 257], [142, 258], [142, 259], [142, 260], [143, 250], [143, 251], [143, 252], [143, 253], [143, 254], [143, 255], [143, 256], [143, 257], [143, 258], [143, 259], [143, 260], [144, 250], [144, 251], [144, 252], [144, 253], [144, 254], [144, 255], [144, 256], [144, 257], [144, 258], [144, 259], [144, 260], [145, 250], [145, 251], [145, 252], [145, 253], [145, 254], [145, 255], [145, 256], [145, 257], [145, 258], [145, 259], [145, 260], [146, 250], [146, 251], [146, 252], [146, 253], [146, 254], [146, 255], [146, 256], [146, 257], [146, 258], [146, 259], [146, 260], [147, 250], [147, 251], [147, 252], [147, 253], [147, 254], [147, 255], [147, 256], [147, 257], [147, 258], [147, 259], [147, 260], [148, 250], [148, 251], [148, 252], [148, 253], [148, 254], [148, 255], [148, 256], [148, 257], [148, 258], [148, 259], [148, 260], [149, 250], [149, 251], [149, 252], [149, 253], [149, 254], [149, 255], [149, 256], [149, 257], [149, 258], [149, 259], [150, 252], [150, 253], [150, 254], [150, 255], [150, 256], [150, 257], [150, 258], [150, 259], [151, 253], [151, 254], [151, 255], [151, 256], [151, 257], [151, 258], [152, 255], [152, 256], [152, 257]]
yes_array_11 = [[164, 26], [164, 27], [164, 28], [164, 29], [165, 26], [165, 27], [165, 28], [165, 29], [165, 30], [165, 31], [166, 25], [166, 26], [166, 27], [166, 28], [166, 29], [166, 30], [166, 31], [167, 22], [167, 23], [167, 24], [167, 25], [167, 26], [167, 27], [167, 28], [167, 29], [167, 30], [167, 31], [168, 20], [168, 21], [168, 22], [168, 23], [168, 24], [168, 25], [168, 26], [168, 27], [168, 28], [168, 29], [168, 30], [168, 31], [169, 20], [169, 21], [169, 22], [169, 23], [169, 24], [169, 25], [169, 26], [169, 27], [169, 28], [169, 29], [169, 30], [169, 31], [170, 19], [170, 20], [170, 21], [170, 22], [170, 23], [170, 24], [170, 25], [170, 26], [170, 27], [170, 28], [170, 29], [170, 30], [171, 18], [171, 19], [171, 20], [171, 21], [171, 22], [171, 23], [171, 24], [171, 25], [171, 26], [171, 27], [171, 28], [171, 29], [172, 18], [172, 19], [172, 20], [172, 21], [172, 22], [172, 23], [172, 24], [172, 25], [172, 26], [172, 27], [172, 28], [172, 29], [173, 19], [173, 20], [173, 21], [173, 22], [173, 23], [173, 24], [173, 25], [173, 26], [173, 27], [173, 28], [174, 19], [174, 20], [174, 21], [174, 22], [174, 23], [174, 24], [174, 25], [174, 26], [174, 27], [175, 19], [175, 20], [175, 21], [175, 22], [175, 23], [175, 24], [175, 25], [175, 26], [175, 27], [176, 21], [176, 22], [176, 23], [176, 24], [176, 25], [176, 26], [176, 27]]
yes_array_14 = [[26, 66], [26, 67], [26, 68], [26, 69], [27, 65], [27, 66], [27, 67], [27, 68], [27, 69], [27, 70], [28, 64], [28, 65], [28, 66], [28, 67], [28, 68], [28, 69], [28, 70], [29, 64], [29, 65], [29, 66], [29, 67], [29, 68], [29, 69], [29, 70], [29, 71], [30, 63], [30, 64], [30, 65], [30, 66], [30, 67], [30, 68], [30, 69], [30, 70], [30, 71], [30, 72], [31, 63], [31, 64], [31, 65], [31, 66], [31, 67], [31, 68], [31, 69], [31, 70], [31, 71], [31, 72], [31, 73], [32, 63], [32, 64], [32, 65], [32, 66], [32, 67], [32, 68], [32, 69], [32, 70], [32, 71], [32, 72], [32, 73], [33, 63], [33, 64], [33, 65], [33, 66], [33, 67], [33, 68], [33, 69], [33, 70], [33, 71], [33, 72], [33, 73], [34, 63], [34, 64], [34, 65], [34, 66], [34, 67], [34, 68], [34, 69], [34, 70], [34, 71], [34, 72], [34, 73], [35, 62], [35, 63], [35, 64], [35, 65], [35, 66], [35, 67], [35, 68], [35, 69], [35, 70], [35, 71], [35, 72], [35, 73], [36, 62], [36, 63], [36, 64], [36, 65], [36, 66], [36, 67], [36, 68], [36, 69], [36, 70], [36, 71], [36, 72], [36, 73], [37, 62], [37, 63], [37, 64], [37, 65], [37, 66], [37, 67], [37, 68], [37, 69], [37, 70], [37, 71], [37, 72], [37, 73], [38, 62], [38, 63], [38, 64], [38, 65], [38, 66], [38, 67], [38, 68], [38, 69], [38, 70], [38, 71], [38, 72], [38, 73], [39, 62], [39, 63], [39, 64], [39, 65], [39, 66], [39, 67], [39, 68], [39, 69], [39, 70], [39, 71], [39, 72], [39, 73], [40, 63], [40, 64], [40, 65], [40, 66], [40, 67], [40, 68], [40, 69], [40, 70], [40, 71], [40, 72], [40, 73], [41, 64], [41, 65], [41, 66], [41, 67], [41, 68], [41, 69], [41, 70], [41, 71], [41, 72], [42, 64], [42, 65], [42, 66], [42, 67], [42, 68], [42, 69], [42, 70], [42, 71], [43, 65], [43, 66], [43, 67], [43, 68], [43, 69], [43, 70], [44, 67], [44, 68], [44, 69]]
yes_array_15 = [[129, 86], [129, 87], [130, 87], [131, 87], [131, 88], [131, 89], [132, 88], [132, 89], [132, 90], [133, 90], [133, 91], [133, 92], [133, 93], [134, 91], [134, 92], [134, 93], [135, 93], [135, 94], [136, 86], [136, 87], [136, 94], [136, 95], [137, 86], [137, 87], [137, 88], [137, 95], [137, 96], [138, 86], [138, 87], [138, 88], [138, 89], [138, 96], [138, 97], [138, 98], [139, 86], [139, 87], [139, 88], [139, 89], [139, 90], [139, 97], [139, 98], [139, 99], [139, 100], [140, 86], [140, 87], [140, 88], [140, 89], [140, 90], [140, 91], [140, 92], [140, 99], [140, 100], [140, 101], [141, 86], [141, 87], [141, 88], [141, 89], [141, 90], [141, 91], [141, 92], [141, 100], [141, 101], [141, 102], [141, 103], [142, 86], [142, 87], [142, 88], [142, 89], [142, 90], [142, 91], [142, 92], [142, 93], [142, 94], [142, 101], [142, 102], [142, 103], [142, 104], [143, 86], [143, 87], [143, 88], [143, 89], [143, 90], [143, 91], [143, 92], [143, 93], [143, 94], [143, 95], [143, 102], [143, 103], [143, 104], [143, 105], [143, 106], [143, 107], [144, 86], [144, 87], [144, 88], [144, 89], [144, 90], [144, 91], [144, 92], [144, 93], [144, 94], [144, 95], [144, 96], [144, 103], [144, 104], [144, 105], [144, 106], [144, 107], [144, 108], [145, 86], [145, 87], [145, 88], [145, 89], [145, 90], [145, 91], [145, 92], [145, 93], [145, 94], [145, 95], [145, 96], [145, 97], [145, 104], [145, 105], [145, 106], [145, 107], [145, 108], [145, 109], [146, 86], [146, 87], [146, 88], [146, 89], [146, 90], [146, 91], [146, 92], [146, 93], [146, 94], [146, 95], [146, 96], [146, 97], [146, 98], [146, 105], [146, 106], [146, 107], [146, 108], [146, 109], [146, 110], [146, 111], [147, 86], [147, 87], [147, 88], [147, 89], [147, 90], [147, 91], [147, 92], [147, 93], [147, 94], [147, 95], [147, 96], [147, 97], [147, 98], [147, 99], [147, 105], [147, 106], [147, 107], [147, 108], [147, 109], [147, 110], [147, 111], [147, 112], [147, 113], [148, 86], [148, 87], [148, 88], [148, 89], [148, 90], [148, 91], [148, 92], [148, 93], [148, 94], [148, 95], [148, 96], [148, 97], [148, 98], [148, 99], [148, 106], [148, 107], [148, 108], [148, 109], [148, 110], [148, 111], [148, 112], [148, 113], [149, 86], [149, 87], [149, 88], [149, 89], [149, 90], [149, 91], [149, 92], [149, 93], [149, 94], [149, 95], [149, 96], [149, 97], [149, 98], [149, 99], [149, 100], [149, 106], [149, 107], [149, 108], [149, 109], [149, 110], [149, 111], [149, 112], [149, 113], [149, 114], [150, 86], [150, 87], [150, 88], [150, 89], [150, 90], [150, 91], [150, 92], [150, 93], [150, 94], [150, 95], [150, 96], [150, 97], [150, 98], [150, 99], [150, 100], [150, 106], [150, 107], [150, 108], [150, 109], [150, 110], [150, 111], [150, 112], [150, 113], [150, 114], [150, 115], [151, 86], [151, 87], [151, 88], [151, 89], [151, 90], [151, 91], [151, 92], [151, 93], [151, 94], [151, 95], [151, 96], [151, 97], [151, 98], [151, 99], [151, 100], [151, 107], [151, 108], [151, 109], [151, 110], [151, 111], [151, 112], [151, 113], [151, 114], [151, 115], [152, 86], [152, 87], [152, 88], [152, 89], [152, 90], [152, 91], [152, 92], [152, 93], [152, 94], [152, 95], [152, 96], [152, 97], [152, 98], [152, 99], [152, 100], [152, 101], [152, 107], [152, 108], [152, 109], [152, 110], [152, 111], [152, 112], [152, 113], [152, 114], [152, 115], [153, 86], [153, 87], [153, 88], [153, 89], [153, 90], [153, 91], [153, 92], [153, 93], [153, 94], [153, 95], [153, 96], [153, 97], [153, 98], [153, 99], [153, 100], [153, 101], [153, 107], [153, 108], [153, 109], [153, 110], [153, 111], [153, 112], [153, 113], [153, 114], [153, 115], [153, 116], [154, 86], [154, 87], [154, 88], [154, 89], [154, 90], [154, 91], [154, 92], [154, 93], [154, 94], [154, 95], [154, 96], [154, 97], [154, 98], [154, 99], [154, 100], [154, 101], [154, 102], [154, 108], [154, 109], [154, 110], [154, 111], [154, 112], [154, 113], [154, 114], [154, 115], [154, 116], [155, 86], [155, 87], [155, 88], [155, 89], [155, 90], [155, 91], [155, 92], [155, 93], [155, 94], [155, 95], [155, 96], [155, 97], [155, 98], [155, 99], [155, 100], [155, 101], [155, 102], [155, 103], [155, 109], [155, 110], [155, 111], [155, 112], [155, 113], [155, 114], [155, 115], [155, 116], [156, 86], [156, 87], [156, 88], [156, 89], [156, 90], [156, 91], [156, 92], [156, 93], [156, 94], [156, 95], [156, 96], [156, 97], [156, 98], [156, 99], [156, 100], [156, 101], [156, 102], [156, 103], [156, 104], [156, 110], [156, 111], [156, 112], [156, 113], [156, 114], [156, 115], [156, 116], [157, 86], [157, 87], [157, 88], [157, 89], [157, 90], [157, 91], [157, 92], [157, 93], [157, 94], [157, 95], [157, 96], [157, 97], [157, 98], [157, 99], [157, 100], [157, 101], [157, 102], [157, 103], [157, 104], [157, 111], [157, 112], [157, 113], [157, 114], [157, 115], [157, 116], [158, 86], [158, 87], [158, 88], [158, 89], [158, 90], [158, 91], [158, 92], [158, 93], [158, 94], [158, 95], [158, 96], [158, 97], [158, 98], [158, 99], [158, 100], [158, 101], [158, 102], [158, 103], [158, 104], [158, 105], [158, 112], [158, 113], [158, 114], [158, 115]]
yes_array_all = {'07': yes_array_07, '08': yes_array_08, '09': yes_array_09, '11': yes_array_11, '04': yes_array_14, '15': yes_array_15}

yes_array = yes_array_all[image_index] if do_catagory else []

for row in range(rows-data_size+1):
    for col in range(cols-data_size+1):
        yes_flag = 0
        all_black_flag = 0
        for x in range(15):
            for y in range(15):
                if [row + x, col + y] in yes_array:
                    yes_flag = 1
                    all_black_flag = 1
                    break
                if img[row + x, col + y] != 0:
                    all_black_flag = 1
                    if len(yes_array) == 0:
                        break
        if all_black_flag == 0:
            continue
        new_img = img[row:row + data_size, col:col + data_size]

        if len(yes_array) == 0:
            cv2.imwrite('{}/{}/{}x{}/{}x{}.png'.format(file_path, image_index, data_size, data_size, row, col), new_img)
            data_number += 1
            continue
        if yes_flag == 1:
            cv2.imwrite('{}/{}/{}x{}/yes/{}x{}.png'.format(file_path, image_index, data_size, data_size, row, col), new_img)
        else:
            cv2.imwrite('{}/{}/{}x{}/no/{}x{}.png'.format(file_path, image_index, data_size, data_size, row, col), new_img)
        data_number += 1


def corp_vessels():
    image = cv2.imread('/Users/candy/Workspace/Paper_CT/output/{}/01-last_result.png'.format(image_index), 0)
    image, contours, hierarchy = cv2.findContours(image, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)
    x, y, w, h = cv2.boundingRect(contours[0])
    print(x, y, w, h)
    image = image[y:y + h, x:x + w]

    cv2.imwrite('/Users/candy/Workspace/Paper_CT/output/{}/02-last_result.png'.format(image_index), image)


def get_average_value(image_index):
    img = cv2.imread('/Users/candy/Workspace/Paper_CT/output/{}/02-last_result.png'.format(image_index), 0)
    rows, cols = img.shape[:2]
    zero_counter = 0
    for row in range(rows):
        for col in range(cols):
            if img[row, col] != 0:
                zero_counter += 1
    return sum(img.flatten()) // zero_counter


def refind_vessels(image_index):
    file_path = '/Users/candy/Workspace/Paper_CT/output/{}'.format(image_index)
    img = cv2.imread('{}/4-find_contours_over_1000_point.png'.format(file_path), 0)

    rows, cols = img.shape[:2]

    last_width = 0
    vessels_pos = []
    vessels_width = 60

    img_find_row = cv2.imread('{}/7-refind_contours.png'.format(file_path), 0)
    row_index = rows
    break_flag = 0
    stop_flag = 0
    stop_row = 0
    for row in range(rows)[::-1]:
        for col in range(cols):
            if img_find_row[row, col] != 0:
                row_index = row
                break_flag = 1
                break
            img[row, col] = 0
        if break_flag == 1:
            print(rows, row_index)
            break
        vessels_pos.append([0, 0])

    for row in range(row_index + 1)[::-1]:
        start_x1 = 0
        start_x2 = 0
        break_flag = 0
        for col in range(cols):
            if img[row, col] != 0 and break_flag == 0:
                break_flag = 1
                start_x1 = col
                continue
            elif img[row, col] == 0 and break_flag == 1:
                if vessels_pos[-1][0] == 0 or (vessels_pos[-1][1] + vessels_width / 3 > col > vessels_pos[-1][
                    1] - vessels_width / 3 and start_x1 < vessels_pos[-1][0] + vessels_width / 3) or (
                        vessels_pos[-1][0] + vessels_width / 3 > start_x1 > vessels_pos[-1][
                    0] - vessels_width / 3 and col > vessels_pos[-1][1] - vessels_width / 3):
                    start_x2 = col
                    break_flag = 2
                    continue
                else:
                    for x in range(start_x1, col):
                        img[row, x] = 0
                    start_x1 = 0
                    break_flag = 0
                    continue
            elif break_flag == 2:
                img[row, col] = 0
        this_width = start_x2 - start_x1

        if abs(last_width - this_width) > vessels_width:
            if abs(vessels_pos[-1][0] - start_x1) <= abs(vessels_pos[-1][1] - start_x2):
                for col in range(start_x1 + last_width, start_x2 + 1):
                    img[row, col] = 0
                    start_x2 = start_x1 + last_width
            else:
                for col in range(start_x1, start_x2 - last_width + 1):
                    img[row, col] = 0
                    start_x1 = start_x2 - last_width
            if stop_flag == 0:
                stop_row = row
            stop_flag = 1
            this_width = 0
        if this_width != 0:
            stop_row = 0
            stop_flag = 0
            last_width = this_width
        vessels_pos.append([start_x1, start_x2])

    for row in range(stop_row, rows)[::-1]:
        if vessels_pos[-row][1] - vessels_pos[-row][0] > 100:
            stop_row = row
            break

    for row in range(stop_row):
        for col in range(cols):
            img[row, col] = 0

    print(vessels_pos)

    # last_img = cv2.imread('{}/00-last_result.png'.format(file_path), 0)
    origin_img = cv2.imread('{}/1-original.png'.format(file_path), 0)
    img = cv2.bitwise_and(img, origin_img)
    cv2.imwrite('{}/01-last_result.png'.format(file_path), img)

    #
    # # plt.hist(img)
    # # plt.show()
    # y, x = np.histogram(img, bins=np.arange(256))
    # fig, ax = plt.subplots()
    # ax.plot(x[:-1], y)
    # fig.show()
    # plt.xlim(1, 256)
    # plt.ylim(0, 1000)
    # plt.show()

